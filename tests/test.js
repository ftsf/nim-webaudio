/* Generated by the Nim Compiler v1.0.2 */
/*   (c) 2019 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI187402 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI187404 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI130 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI187424 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3650 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3630 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3652 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3662 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3642 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3646 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3658 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI187422 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI124 = {size: 0,kind: 36,base: null,node: null,finalizer: null};
var NTI187432 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI158898 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI158892 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI158886 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI158880 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI158874 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI158860 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI158856 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI158851 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI158847 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI158843 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI158842 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI158840 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI187430 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI104 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI21156 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI3608 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3714 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI114 = {size: 0,kind: 40,base: null,node: null,finalizer: null};
var NTI138 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI140 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI3708 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI3626 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3628 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3686 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NNI3686 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3686.node = NNI3686;
var NNI3628 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3628.node = NNI3628;
NTI3708.base = NTI3626;
NTI3714.base = NTI3626;
var NNI3626 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI3708, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI140, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI138, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI138, name: "trace", sons: null}, 
{kind: 1, offset: "raiseId", len: 0, typ: NTI114, name: "raiseId", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI3714, name: "up", sons: null}]};
NTI3626.node = NNI3626;
var NNI3608 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3608.node = NNI3608;
NTI3626.base = NTI3608;
NTI3628.base = NTI3626;
NTI3686.base = NTI3628;
var NNI21156 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI140, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}]};
NTI21156.node = NNI21156;
var NNI158842 = {kind: 2, len: 10, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "closeImpl", len: 0, typ: NTI158843, name: "closeImpl", sons: null}, 
{kind: 1, offset: "atEndImpl", len: 0, typ: NTI158847, name: "atEndImpl", sons: null}, 
{kind: 1, offset: "setPositionImpl", len: 0, typ: NTI158851, name: "setPositionImpl", sons: null}, 
{kind: 1, offset: "getPositionImpl", len: 0, typ: NTI158856, name: "getPositionImpl", sons: null}, 
{kind: 1, offset: "readDataStrImpl", len: 0, typ: NTI158860, name: "readDataStrImpl", sons: null}, 
{kind: 1, offset: "readLineImpl", len: 0, typ: NTI158874, name: "readLineImpl", sons: null}, 
{kind: 1, offset: "readDataImpl", len: 0, typ: NTI158880, name: "readDataImpl", sons: null}, 
{kind: 1, offset: "peekDataImpl", len: 0, typ: NTI158886, name: "peekDataImpl", sons: null}, 
{kind: 1, offset: "writeDataImpl", len: 0, typ: NTI158892, name: "writeDataImpl", sons: null}, 
{kind: 1, offset: "flushImpl", len: 0, typ: NTI158898, name: "flushImpl", sons: null}]};
NTI158842.node = NNI158842;
NTI158842.base = NTI3608;
NTI158840.base = NTI158842;
NTI187432.base = NTI138;
var NNI187430 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "stream", len: 0, typ: NTI158840, name: "stream", sons: null}, 
{kind: 1, offset: "testErrors", len: 0, typ: NTI187432, name: "testErrors", sons: null}, 
{kind: 1, offset: "testStartTime", len: 0, typ: NTI124, name: "testStartTime", sons: null}, 
{kind: 1, offset: "testStackTrace", len: 0, typ: NTI138, name: "testStackTrace", sons: null}]};
NTI187430.node = NNI187430;
var NNI187422 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI187422.node = NNI187422;
NTI187422.base = NTI3608;
NTI187430.base = NTI187422;
var NNI3658 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3658.node = NNI3658;
NTI3658.base = NTI3628;
var NNI3646 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3646.node = NNI3646;
var NNI3642 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3642.node = NNI3642;
NTI3642.base = NTI3628;
NTI3646.base = NTI3642;
var NNI3662 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3662.node = NNI3662;
NTI3662.base = NTI3628;
var NNI3652 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3652.node = NNI3652;
var NNI3630 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3630.node = NNI3630;
NTI3630.base = NTI3626;
NTI3652.base = NTI3630;
var NNI3650 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3650.node = NNI3650;
NTI3650.base = NTI3628;
var NNI187404 = {kind: 2, offset: 0, typ: null, name: null, len: 3, sons: {"0": {kind: 1, offset: 0, typ: NTI187404, name: "PRINT_ALL", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI187404, name: "PRINT_FAILURES", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI187404, name: "PRINT_NONE", len: 0, sons: null}}};
NTI187404.node = NNI187404;
var NNI187424 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "colorOutput", len: 0, typ: NTI130, name: "colorOutput", sons: null}, 
{kind: 1, offset: "outputLevel", len: 0, typ: NTI187404, name: "outputLevel", sons: null}, 
{kind: 1, offset: "isInSuite", len: 0, typ: NTI130, name: "isInSuite", sons: null}, 
{kind: 1, offset: "isInTest", len: 0, typ: NTI130, name: "isInTest", sons: null}]};
NTI187424.node = NNI187424;
NTI187424.base = NTI187422;
var NNI187402 = {kind: 2, offset: 0, typ: null, name: null, len: 3, sons: {"0": {kind: 1, offset: 0, typ: NTI187402, name: "OK", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI187402, name: "FAILED", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI187402, name: "SKIPPED", len: 0, sons: null}}};
NTI187402.node = NNI187402;

function setConstr() {
		    var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

	
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_24827, src_24828, ti_24829) {
	var result_25019 = null;

		switch (ti_24829.kind) {
		case 21:
		case 22:
		case 23:
		case 5:
			if (!(is_fat_pointer_24801(ti_24829))) {
			result_25019 = src_24828;
			}
			else {
				result_25019 = [src_24828[0], src_24828[1]];
			}
			
			break;
		case 19:
			      if (dest_24827 === null || dest_24827 === undefined) {
        dest_24827 = {};
      }
      else {
        for (var key in dest_24827) { delete dest_24827[key]; }
      }
      for (var key in src_24828) { dest_24827[key] = src_24828[key]; }
      result_25019 = dest_24827;
    
			break;
		case 18:
		case 17:
			if (!((ti_24829.base == null))) {
			result_25019 = nimCopy(dest_24827, src_24828, ti_24829.base);
			}
			else {
			if ((ti_24829.kind == 17)) {
			result_25019 = (dest_24827 === null || dest_24827 === undefined) ? {m_type: ti_24829} : dest_24827;
			}
			else {
				result_25019 = (dest_24827 === null || dest_24827 === undefined) ? {} : dest_24827;
			}
			}
			nimCopyAux(result_25019, src_24828, ti_24829.node);
			break;
		case 24:
		case 4:
		case 27:
		case 16:
			      if (src_24828 === null) {
        result_25019 = null;
      }
      else {
        if (dest_24827 === null || dest_24827 === undefined) {
          dest_24827 = new Array(src_24828.length);
        }
        else {
          dest_24827.length = src_24828.length;
        }
        result_25019 = dest_24827;
        for (var i = 0; i < src_24828.length; ++i) {
          result_25019[i] = nimCopy(result_25019[i], src_24828[i], ti_24829.base);
        }
      }
    
			break;
		case 28:
			      if (src_24828 !== null) {
        result_25019 = src_24828.slice(0);
      }
    
			break;
		default: 
			result_25019 = src_24828;
			break;
		}

	return result_25019;

}

function makeNimstrLit(c_23270) {
		  var ln = c_23270.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_23270.charCodeAt(i);
  }
  return result;
  

	
}

function arrayConstr(len_25086, value_25087, typ_25088) {
		    var result = new Array(len_25086);
    for (var i = 0; i < len_25086; ++i) result[i] = nimCopy(null, value_25087, typ_25088);
    return result;
  

	
}

function cstrToNimstr(c_23287) {
		  var ln = c_23287.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_23287.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_23287.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

	
}

function toJSStr(s_23304) {
										var Tmp5;
						var Tmp7;

	var result_23305 = null;

		var res_23363 = new_seq_23336((s_23304 != null ? s_23304.length : 0));
		var i_23365 = 0;
		var j_23367 = 0;
		L1: do {
				L2: while (true) {
				if (!(i_23365 < (s_23304 != null ? s_23304.length : 0))) break L2;
					var c_23368 = s_23304[i_23365];
					if ((c_23368 < 128)) {
					res_23363[j_23367] = String.fromCharCode(c_23368);
					i_23365 += 1;
					}
					else {
						var helper_23391 = new_seq_23336(0);
						L3: do {
								L4: while (true) {
								if (!true) break L4;
									var code_23392 = c_23368.toString(16);
									if (((code_23392 != null ? code_23392.length : 0) == 1)) {
									if (helper_23391 != null) { helper_23391.push("%0"); } else { helper_23391 = ["%0"]; };
									}
									else {
									if (helper_23391 != null) { helper_23391.push("%"); } else { helper_23391 = ["%"]; };
									}
									
									if (helper_23391 != null) { helper_23391.push(code_23392); } else { helper_23391 = [code_23392]; };
									i_23365 += 1;
										if (((s_23304 != null ? s_23304.length : 0) <= i_23365)) Tmp5 = true; else {											Tmp5 = (s_23304[i_23365] < 128);										}									if (Tmp5) {
									break L3;
									}
									
									c_23368 = s_23304[i_23365];
								}
						} while(false);
++excHandler;
						Tmp7 = framePtr;
						try {
						res_23363[j_23367] = decodeURIComponent(helper_23391.join(""));
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
						framePtr = Tmp7;
						res_23363[j_23367] = helper_23391.join("");
						lastJSError = prevJSError;
						} finally {
						framePtr = Tmp7;
						}
					}
					
					j_23367 += 1;
				}
		} while(false);
		if (res_23363 === null) res_23363 = [];
               if (res_23363.length < j_23367) { for (var i=res_23363.length;i<j_23367;++i) res_23363.push(null); }
               else { res_23363.length = j_23367; };
		result_23305 = res_23363.join("");

	return result_23305;

}

function raiseException(e_21618, ename_21619) {
		e_21618.name = ename_21619;
		if ((excHandler == 0)) {
		unhandledException(e_21618);
		}
		
		e_21618.trace = nimCopy(null, raw_write_stack_trace_21468(), NTI138);
		throw e_21618;

	
}

function isObj(obj_25270, subclass_25271) {
	var result_25272 = false;

	BeforeRet: do {
		var x_25273 = obj_25270;
		if ((x_25273 == subclass_25271)) {
		result_25272 = true;
		break BeforeRet;
		}
		
		L1: do {
				L2: while (true) {
				if (!!((x_25273 == subclass_25271))) break L2;
					if ((x_25273 == null)) {
					result_25272 = false;
					break BeforeRet;
					}
					
					x_25273 = x_25273.base;
				}
		} while(false);
		result_25272 = true;
		break BeforeRet;
	} while (false);

	return result_25272;

}

function chckIndx(i_25105, a_25106, b_25107) {
			var Tmp1;

	var result_25108 = 0;

	BeforeRet: do {
			if (!(a_25106 <= i_25105)) Tmp1 = false; else {				Tmp1 = (i_25105 <= b_25107);			}		if (Tmp1) {
		result_25108 = i_25105;
		break BeforeRet;
		}
		else {
		raiseIndexError(i_25105, a_25106, b_25107);
		}
		
	} while (false);

	return result_25108;

}

function addInt(a_23803, b_23804) {
		    var result = a_23803 + b_23804;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}

function mnewString(len_23463) {
		    return new Array(len_23463);
  

	
}

function chckRange(i_25124, a_25125, b_25126) {
			var Tmp1;

	var result_25127 = 0;

	BeforeRet: do {
			if (!(a_25125 <= i_25124)) Tmp1 = false; else {				Tmp1 = (i_25124 <= b_25126);			}		if (Tmp1) {
		result_25127 = i_25124;
		break BeforeRet;
		}
		else {
		raiseRangeError();
		}
		
	} while (false);

	return result_25127;

}

function addChar(x_25311, c_25312) {
		x_25311.push(c_25312);

	
}
var ConstSet2 = setConstr([48, 57]);

function subInt(a_23821, b_23822) {
		    var result = a_23821 - b_23822;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}

function mulInt(a_23839, b_23840) {
		    var result = a_23839 * b_23840;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}
var ConstSet3 = setConstr(0, 125);
var ConstSet4 = setConstr([48, 57]);
var ConstSet5 = setConstr([65, 90]);

function nimMax(a_24221, b_24222) {
		var Tmp1;

	var result_24223 = 0;

	BeforeRet: do {
		if ((b_24222 <= a_24221)) {
		Tmp1 = a_24221;
		}
		else {
		Tmp1 = b_24222;
		}
		
		result_24223 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_24223;

}

function nimMin(a_24203, b_24204) {
		var Tmp1;

	var result_24205 = 0;

	BeforeRet: do {
		if ((a_24203 <= b_24204)) {
		Tmp1 = a_24203;
		}
		else {
		Tmp1 = b_24204;
		}
		
		result_24205 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_24205;

}
var ConstSet6 = setConstr([97, 122], [65, 90], [48, 57], [128, 255], 95);

function rawEcho() {
		      var buf = "";
      for (var i = 0; i < arguments.length; ++i) {
        buf += toJSStr(arguments[i]);
      }
      console.log(buf);
    

	
}
var ConstSet7 = setConstr(46, 44);

function reprEnum(e_25880, typ_25881) {
	var result_25882 = null;

	var F={procname:"system.reprEnum",prev:framePtr,filename:"reprjs.nim",line:0};
	framePtr = F;
		if (!(is_undefined_25883(typ_25881.node.sons[e_25880]))) {
		F.line = 38;
		result_25882 = nimCopy(null, makeNimstrLit(typ_25881.node.sons[e_25880].name), NTI138);
		}
		else {
			F.line = 40;
			result_25882 = nimCopy(null, (cstrToNimstr((e_25880)+"") || []).concat(makeNimstrLit(" (invalid data!)") || []), NTI138);
		}
		
	framePtr = F.prev;

	return result_25882;

}
var nim_program_result = 0;
var global_raise_hook_18618 = [null];
var local_raise_hook_18623 = [null];
var out_of_mem_hook_18626 = [null];
  if (!Math.trunc) {
    Math.trunc = function(v) {
      v = +v;
      if (!isFinite(v)) return v;

      return (v - v % 1)   ||   (v < 0 ? -0 : v === 0 ? v : 0);
    };
  }
var utc_instance_172031 = [null];
var local_instance_172032 = [null];
var object_id_179237 = [0];
var abort_on_error_187452 = [false];
var checkpoints_187454 = [null];
var formatters_187456 = [null];
var tests_filters_187475 = [{data: null, counter: 0}];
var disabled_param_filtering_187476 = [false];

function HEX2AHEX3D_155841(x_155845, x_155845_Idx, y_155846) {
	var F={procname:"*=.*=",prev:framePtr,filename:"system.nim",line:0};
	framePtr = F;
		F.line = 4135;
		x_155845[x_155845_Idx] = (x_155845[x_155845_Idx] * y_155846);
	framePtr = F.prev;

	
}

function HEX3Aanonymous_209030() {
	var F={procname:"test.:anonymous",prev:framePtr,filename:"test.nim",line:0};
	framePtr = F;
		if ((0.0 < gain_209028[0].gain.value)) {
		F.line = 18;
		gain_209028[0].gain.value = (gain_209028[0].gain.value - 1.0000000000000000e-002);
		if ((gain_209028[0].gain.value < 0.0)) {
		F.line = 20;
		gain_209028[0].gain.value = 0.0;
		}
		
		}
		
	framePtr = F.prev;

	
}

function HEX3Aanonymous_209046() {
	var F={procname:"test.:anonymous",prev:framePtr,filename:"test.nim",line:0};
	framePtr = F;
		F.line = 25;
		HEX2AHEX3D_155841(osc_209029[0].frequency, "value", 5.0000000000000000e-001);
		if ((osc_209029[0].frequency.value < 2.0000000000000000e+001)) {
		F.line = 27;
		gain_209028[0].gain.value = 0.0;
		}
		
	framePtr = F.prev;

	
}

function HEX3Aanonymous_209069(e_209071) {
	var F={procname:"test.:anonymous",prev:framePtr,filename:"test.nim",line:0};
	framePtr = F;
		F.line = 31;
		osc_209029[0].frequency.value = 8.8000000000000000e+002;
		F.line = 32;
		gain_209028[0].gain.value = 5.0000000000000000e-001;
	framePtr = F.prev;

	
}
var ctx_209027 = [new AudioContext()];
var gain_209028 = [ctx_209027[0].createGain()];
gain_209028[0].gain.value = 5.0000000000000000e-001;
gain_209028[0].connect(ctx_209027[0].destination);
var osc_209029 = [ctx_209027[0].createOscillator()];
osc_209029[0].type = "square";
osc_209029[0].frequency.value = 4.4000000000000000e+002;
osc_209029[0].connect(gain_209028[0]);
osc_209029[0].start();
var interval_209045 = [window.setInterval(HEX3Aanonymous_209030, 30)];
var interval2_209068 = [window.setInterval(HEX3Aanonymous_209046, 60)];
window.addEventListener("mousedown", HEX3Aanonymous_209069, false);

function is_fat_pointer_24801(ti_24803) {
	var result_24804 = false;

	BeforeRet: do {
		result_24804 = !((ConstSet1[ti_24803.base.kind] != undefined));
		break BeforeRet;
	} while (false);

	return result_24804;

}

function nimCopyAux(dest_24832, src_24833, n_24835) {
		switch (n_24835.kind) {
		case 0:
			break;
		case 1:
			      dest_24832[n_24835.offset] = nimCopy(dest_24832[n_24835.offset], src_24833[n_24835.offset], n_24835.typ);
    
			break;
		case 2:
			    for (var i = 0; i < n_24835.sons.length; i++) {
      nimCopyAux(dest_24832, src_24833, n_24835.sons[i]);
    }
    
			break;
		case 3:
			      dest_24832[n_24835.offset] = nimCopy(dest_24832[n_24835.offset], src_24833[n_24835.offset], n_24835.typ);
      for (var i = 0; i < n_24835.sons.length; ++i) {
        nimCopyAux(dest_24832, src_24833, n_24835.sons[i][1]);
      }
    
			break;
		}

	
}

function add_18638(x_18641, x_18641_Idx, y_18642) {
		      if (x_18641[x_18641_Idx] === null) { x_18641[x_18641_Idx] = []; }
      var off = x_18641[x_18641_Idx].length;
      x_18641[x_18641_Idx].length += y_18642.length;
      for (var i = 0; i < y_18642.length; ++i) {
        x_18641[x_18641_Idx][off+i] = y_18642.charCodeAt(i);
      }
    

	
}

function aux_write_stack_trace_21151(f_21153) {
					var Tmp3;

	var result_21154 = [null];

		var it_21162 = f_21153;
		var i_21164 = 0;
		var total_21166 = 0;
		var temp_frames_21173 = arrayConstr(64, {Field0: null, Field1: 0}, NTI21156);
		L1: do {
				L2: while (true) {
					if (!!((it_21162 == null))) Tmp3 = false; else {						Tmp3 = (i_21164 <= 63);					}				if (!Tmp3) break L2;
					temp_frames_21173[i_21164].Field0 = it_21162.procname;
					temp_frames_21173[i_21164].Field1 = it_21162.line;
					i_21164 += 1;
					total_21166 += 1;
					it_21162 = it_21162.prev;
				}
		} while(false);
		L4: do {
				L5: while (true) {
				if (!!((it_21162 == null))) break L5;
					total_21166 += 1;
					it_21162 = it_21162.prev;
				}
		} while(false);
		result_21154[0] = nimCopy(null, [], NTI138);
		if (!((total_21166 == i_21164))) {
		if (result_21154[0] != null) { result_21154[0] = (result_21154[0]).concat(makeNimstrLit("(")); } else { result_21154[0] = makeNimstrLit("("); };
		if (result_21154[0] != null) { result_21154[0] = (result_21154[0]).concat(cstrToNimstr(((total_21166 - i_21164))+"")); } else { result_21154[0] = cstrToNimstr(((total_21166 - i_21164))+"").slice(); };
		if (result_21154[0] != null) { result_21154[0] = (result_21154[0]).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_21154[0] = makeNimstrLit(" calls omitted) ...\x0A"); };
		}
		
		L6: do {
			var j_21421 = 0;
			var colontmp__209190 = 0;
			colontmp__209190 = (i_21164 - 1);
			var res_209195 = colontmp__209190;
			L7: do {
					L8: while (true) {
					if (!(0 <= res_209195)) break L8;
						j_21421 = res_209195;
						add_18638(result_21154, 0, temp_frames_21173[j_21421].Field0);
						if ((0 < temp_frames_21173[j_21421].Field1)) {
						if (result_21154[0] != null) { result_21154[0] = (result_21154[0]).concat(makeNimstrLit(", line: ")); } else { result_21154[0] = makeNimstrLit(", line: "); };
						if (result_21154[0] != null) { result_21154[0] = (result_21154[0]).concat(cstrToNimstr((temp_frames_21173[j_21421].Field1)+"")); } else { result_21154[0] = cstrToNimstr((temp_frames_21173[j_21421].Field1)+"").slice(); };
						}
						
						if (result_21154[0] != null) { result_21154[0] = (result_21154[0]).concat(makeNimstrLit("\x0A")); } else { result_21154[0] = makeNimstrLit("\x0A"); };
						res_209195 -= 1;
					}
			} while(false);
		} while(false);

	return result_21154[0];

}

function raw_write_stack_trace_21468() {
	var result_21470 = null;

		if (!((framePtr == null))) {
		result_21470 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A") || []).concat(aux_write_stack_trace_21151(framePtr) || []), NTI138);
		}
		else {
			result_21470 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI138);
		}
		

	return result_21470;

}

function new_seq_23336(len_23339) {
	var result_23341 = null;

	var F={procname:"newSeq.newSeq",prev:framePtr,filename:"system.nim",line:0};
	framePtr = F;
		F.line = 996;
		result_23341 = new Array(len_23339); for (var i=0;i<len_23339;++i) {result_23341[i]=null;}	framePtr = F.prev;

	return result_23341;

}

function unhandledException(e_21529) {
		var buf_21530 = [[]];
		if (!(((e_21529.message != null ? e_21529.message.length : 0) == 0))) {
		if (buf_21530[0] != null) { buf_21530[0] = (buf_21530[0]).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_21530[0] = makeNimstrLit("Error: unhandled exception: "); };
		if (buf_21530[0] != null) { buf_21530[0] = (buf_21530[0]).concat(e_21529.message); } else { buf_21530[0] = e_21529.message.slice(); };
		}
		else {
		if (buf_21530[0] != null) { buf_21530[0] = (buf_21530[0]).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_21530[0] = makeNimstrLit("Error: unhandled exception"); };
		}
		
		if (buf_21530[0] != null) { buf_21530[0] = (buf_21530[0]).concat(makeNimstrLit(" [")); } else { buf_21530[0] = makeNimstrLit(" ["); };
		add_18638(buf_21530, 0, e_21529.name);
		if (buf_21530[0] != null) { buf_21530[0] = (buf_21530[0]).concat(makeNimstrLit("]\x0A")); } else { buf_21530[0] = makeNimstrLit("]\x0A"); };
		if (buf_21530[0] != null) { buf_21530[0] = (buf_21530[0]).concat(raw_write_stack_trace_21468()); } else { buf_21530[0] = raw_write_stack_trace_21468().slice(); };
		var cbuf_21601 = toJSStr(buf_21530[0]);
		framePtr = null;
		  if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_21601);
  }
  else {
    throw cbuf_21601;
  }
  

	
}

function sys_fatal_24241(message_24245) {
	var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"fatal.nim",line:0};
	framePtr = F;
		F.line = 34;
		var e_24403 = null;
		F.line = 37;
		e_24403 = {m_type: NTI3686, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		F.line = 38;
		e_24403.message = nimCopy(null, message_24245, NTI138);
		F.line = 39;
		raiseException(e_24403, "NilAccessError");
	framePtr = F.prev;

	
}

function chckNilDisp(p_24239, p_24239_Idx) {
		if ((p_24239 == null && p_24239_Idx == 0)) {
		sys_fatal_24241(makeNimstrLit("cannot dispatch; dispatcher is nil"));
		}
		

	
}

function raiseIndexError(i_22655, a_22656, b_22657) {
		var Tmp1;

		var eHEX60gensym22802_23003 = null;
		eHEX60gensym22802_23003 = {m_type: NTI3658, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		if ((b_22657 < a_22656)) {
		Tmp1 = makeNimstrLit("index out of bounds, the container is empty");
		}
		else {
		Tmp1 = (makeNimstrLit("index ") || []).concat(cstrToNimstr((i_22655)+"") || [],makeNimstrLit(" not in ") || [],cstrToNimstr((a_22656)+"") || [],makeNimstrLit(" .. ") || [],cstrToNimstr((b_22657)+"") || []);
		}
		
		eHEX60gensym22802_23003.message = nimCopy(null, Tmp1, NTI138);
		eHEX60gensym22802_23003.parent = null;
		raiseException(eHEX60gensym22802_23003, "IndexError");

	
}

function write_data_159233(s_159235, buffer_159236, buffer_159236_Idx, buf_len_159237) {
	var F={procname:"streams.writeData",prev:framePtr,filename:"streams.nim",line:0};
	framePtr = F;
		F.line = 294;
		s_159235.writeDataImpl(s_159235, buffer_159236, buffer_159236_Idx, buf_len_159237);
	framePtr = F.prev;

	
}

function write_159259(s_159261, x_159262) {
	var F={procname:"streams.write",prev:framePtr,filename:"streams.nim",line:0};
	framePtr = F;
		if ((0 < (x_159262 != null ? x_159262.length : 0))) {
		F.line = 326;
		write_data_159233(s_159261, toJSStr(x_159262), (x_159262 != null ? x_159262.length : 0));
		}
		
	framePtr = F.prev;

	
}

function raiseOverflow() {
		var eHEX60gensym22058_22203 = null;
		eHEX60gensym22058_22203 = {m_type: NTI3646, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		eHEX60gensym22058_22203.message = nimCopy(null, makeNimstrLit("over- or underflow"), NTI138);
		eHEX60gensym22058_22203.parent = null;
		raiseException(eHEX60gensym22058_22203, "OverflowError");

	
}

function write_line_159641(s_159643, args_159645) {
	var F={procname:"streams.writeLine",prev:framePtr,filename:"streams.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 351;
			var str_159651 = null;
			F.line = 3;
			var i_209205 = 0;
			L2: do {
				F.line = 4;
					L3: while (true) {
					if (!(i_209205 < (args_159645 != null ? args_159645.length : 0))) break L3;
						F.line = 351;
						str_159651 = args_159645[chckIndx(i_209205, 0, args_159645.length+0-1)-0];
						F.line = 351;
						write_159259(s_159643, str_159651);
						F.line = 6;
						i_209205 = addInt(i_209205, 1);
					}
			} while(false);
		} while(false);
		F.line = 352;
		write_159259(s_159643, makeNimstrLit("\x0A"));
	framePtr = F.prev;

	
}

function raiseRangeError() {
		var eHEX60gensym22457_22603 = null;
		eHEX60gensym22457_22603 = {m_type: NTI3662, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		eHEX60gensym22457_22603.message = nimCopy(null, makeNimstrLit("value out of range"), NTI138);
		eHEX60gensym22457_22603.parent = null;
		raiseException(eHEX60gensym22457_22603, "RangeError");

	
}

function invalid_format_string_155939() {
	var F={procname:"strutils.invalidFormatString",prev:framePtr,filename:"strutils.nim",line:0};
	framePtr = F;
		F.line = 3463;
		var eHEX60gensym155943_156003 = null;
		F.line = 3466;
		eHEX60gensym155943_156003 = {m_type: NTI3652, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		F.line = 2633;
		eHEX60gensym155943_156003.message = nimCopy(null, makeNimstrLit("invalid format string"), NTI138);
		F.line = 3459;
		eHEX60gensym155943_156003.parent = null;
		F.line = 2633;
		raiseException(eHEX60gensym155943_156003, "ValueError");
	framePtr = F.prev;

	
}

function nsuToLowerAsciiChar(c_147380) {
	var result_147381 = 0;

	var F={procname:"strutils.toLowerAscii",prev:framePtr,filename:"strutils.nim",line:0};
	framePtr = F;
		if ((ConstSet5[c_147380] != undefined)) {
		F.line = 222;
		result_147381 = chckRange(addInt(c_147380, 32), 0, 255);
		}
		else {
			F.line = 224;
			result_147381 = c_147380;
		}
		
	framePtr = F.prev;

	return result_147381;

}

function nsuCmpIgnoreStyle(a_147649, b_147650) {
					var Tmp7;
					var Tmp8;

	var result_147651 = 0;

	BeforeRet: do {
		var i_147653 = 0;
		var j_147655 = 0;
		L1: do {
				L2: while (true) {
				if (!true) break L2;
					L3: do {
							L4: while (true) {
							if (!((i_147653 < (a_147649 != null ? a_147649.length : 0)) && (a_147649[i_147653] == 95))) break L4;
								i_147653 += 1;
							}
					} while(false);
					L5: do {
							L6: while (true) {
							if (!((j_147655 < (b_147650 != null ? b_147650.length : 0)) && (b_147650[j_147655] == 95))) break L6;
								j_147655 += 1;
							}
					} while(false);
					if ((i_147653 < (a_147649 != null ? a_147649.length : 0))) {
					Tmp7 = nsuToLowerAsciiChar(a_147649[i_147653]);
					}
					else {
					Tmp7 = 0;
					}
					
					var aa_147668 = Tmp7;
					if ((j_147655 < (b_147650 != null ? b_147650.length : 0))) {
					Tmp8 = nsuToLowerAsciiChar(b_147650[j_147655]);
					}
					else {
					Tmp8 = 0;
					}
					
					var bb_147669 = Tmp8;
					result_147651 = (aa_147668 - bb_147669);
					if (!((result_147651 == 0))) {
					break BeforeRet;
					}
					
					if (((a_147649 != null ? a_147649.length : 0) <= i_147653)) {
					if (((b_147650 != null ? b_147650.length : 0) <= j_147655)) {
					result_147651 = 0;
					break BeforeRet;
					}
					
					result_147651 = -1;
					break BeforeRet;
					}
					else {
					if (((b_147650 != null ? b_147650.length : 0) <= j_147655)) {
					result_147651 = 1;
					break BeforeRet;
					}
					}
					i_147653 += 1;
					j_147655 += 1;
				}
		} while(false);
	} while (false);

	return result_147651;

}

function find_normalized_155906(x_155908, in_array_155910) {
	var result_155911 = 0;

	var F={procname:"strutils.findNormalized",prev:framePtr,filename:"strutils.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 2625;
		var i_155913 = 0;
		L1: do {
			F.line = 2626;
				L2: while (true) {
				if (!(i_155913 < (in_array_155910 != null ? (in_array_155910.length-1) : -1))) break L2;
					if ((nsuCmpIgnoreStyle(x_155908, in_array_155910[chckIndx(i_155913, 0, in_array_155910.length+0-1)-0]) == 0)) {
					F.line = 2627;
					result_155911 = i_155913;
					break BeforeRet;
					}
					
					F.line = 2628;
					i_155913 = addInt(i_155913, 2);
				}
		} while(false);
		F.line = 2630;
		result_155911 = -1;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_155911;

}

function substr_30222(s_30224, first_30225, last_30226) {
	var result_30227 = null;

	var F={procname:"system.substr",prev:framePtr,filename:"system.nim",line:0};
	framePtr = F;
		F.line = 4495;
		var first_30228 = nimMax(first_30225, 0);
		F.line = 4496;
		var l_30230 = nimMax(addInt(subInt(nimMin(last_30226, (s_30224 != null ? (s_30224.length-1) : -1)), first_30228), 1), 0);
		F.line = 4497;
		result_30227 = nimCopy(null, mnewString(chckRange(l_30230, 0, 2147483647)), NTI138);
		L1: do {
			F.line = 4498;
			var i_30239 = 0;
			F.line = 2698;
			var colontmp__209224 = 0;
			F.line = 4498;
			colontmp__209224 = subInt(l_30230, 1);
			F.line = 2709;
			var res_209225 = 0;
			L2: do {
				F.line = 2710;
					L3: while (true) {
					if (!(res_209225 <= colontmp__209224)) break L3;
						F.line = 4498;
						i_30239 = res_209225;
						F.line = 4499;
						result_30227[chckIndx(i_30239, 0, result_30227.length+0-1)-0] = s_30224[chckIndx(addInt(i_30239, first_30228), 0, s_30224.length+0-1)-0];
						F.line = 2712;
						res_209225 = addInt(res_209225, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_30227;

}

function nsuAddf(s_156026, s_156026_Idx, formatstr_156027, a_156029) {
									var Tmp5;
						var Tmp6;
							var Tmp7;
						var Tmp10;
							var Tmp11;
								var Tmp12;
									var Tmp15;
							var Tmp16;

	var F={procname:"strutils.addf",prev:framePtr,filename:"strutils.nim",line:0};
	framePtr = F;
		F.line = 2639;
		var i_156033 = 0;
		F.line = 2640;
		var num_156035 = 0;
		L1: do {
			F.line = 2641;
				L2: while (true) {
				if (!(i_156033 < (formatstr_156027 != null ? formatstr_156027.length : 0))) break L2;
					if (((formatstr_156027[chckIndx(i_156033, 0, formatstr_156027.length+0-1)-0] == 36) && (addInt(i_156033, 1) < (formatstr_156027 != null ? formatstr_156027.length : 0)))) {
					F.line = 2643;
					switch (formatstr_156027[chckIndx(addInt(i_156033, 1), 0, formatstr_156027.length+0-1)-0]) {
					case 35:
						if (((a_156029 != null ? (a_156029.length-1) : -1) < num_156035)) {
						F.line = 2645;
						invalid_format_string_155939();
						}
						
						F.line = 2646;
						if (s_156026[s_156026_Idx] != null) { s_156026[s_156026_Idx] = (s_156026[s_156026_Idx]).concat(a_156029[chckIndx(num_156035, 0, a_156029.length+0-1)-0]); } else { s_156026[s_156026_Idx] = a_156029[chckIndx(num_156035, 0, a_156029.length+0-1)-0].slice(); };
						F.line = 2647;
						i_156033 = addInt(i_156033, 2);
						F.line = 2648;
						num_156035 = addInt(num_156035, 1);
						break;
					case 36:
						F.line = 2650;
						if (s_156026[s_156026_Idx] != null) { addChar(s_156026[s_156026_Idx], 36); } else { s_156026[s_156026_Idx] = [36]; };
						F.line = 2651;
						i_156033 = addInt(i_156033, 2);
						break;
					case 49:
					case 50:
					case 51:
					case 52:
					case 53:
					case 54:
					case 55:
					case 56:
					case 57:
					case 45:
						F.line = 2653;
						var j_156060 = 0;
						F.line = 2654;
						i_156033 = addInt(i_156033, 1);
						F.line = 2655;
						var negative_156067 = (formatstr_156027[chckIndx(i_156033, 0, formatstr_156027.length+0-1)-0] == 45);
						if (negative_156067) {
						F.line = 2656;
						i_156033 = addInt(i_156033, 1);
						}
						
						L3: do {
							F.line = 2657;
								L4: while (true) {
									if (!(i_156033 < (formatstr_156027 != null ? formatstr_156027.length : 0))) Tmp5 = false; else {										Tmp5 = (ConstSet2[formatstr_156027[chckIndx(i_156033, 0, formatstr_156027.length+0-1)-0]] != undefined);									}								if (!Tmp5) break L4;
									F.line = 2658;
									j_156060 = subInt(addInt(mulInt(j_156060, 10), formatstr_156027[chckIndx(i_156033, 0, formatstr_156027.length+0-1)-0]), 48);
									F.line = 2659;
									i_156033 = addInt(i_156033, 1);
								}
						} while(false);
						F.line = 2660;
						if (!(negative_156067)) {
						Tmp6 = subInt(j_156060, 1);
						}
						else {
						Tmp6 = subInt((a_156029 != null ? a_156029.length : 0), j_156060);
						}
						
						var idx_156098 = Tmp6;
							if ((idx_156098 < 0)) Tmp7 = true; else {								Tmp7 = ((a_156029 != null ? (a_156029.length-1) : -1) < idx_156098);							}						if (Tmp7) {
						F.line = 2661;
						invalid_format_string_155939();
						}
						
						F.line = 2662;
						if (s_156026[s_156026_Idx] != null) { s_156026[s_156026_Idx] = (s_156026[s_156026_Idx]).concat(a_156029[chckIndx(idx_156098, 0, a_156029.length+0-1)-0]); } else { s_156026[s_156026_Idx] = a_156029[chckIndx(idx_156098, 0, a_156029.length+0-1)-0].slice(); };
						break;
					case 123:
						F.line = 2664;
						var j_156104 = addInt(i_156033, 2);
						F.line = 2665;
						var k_156106 = 0;
						F.line = 2666;
						var negative_156107 = (formatstr_156027[chckIndx(j_156104, 0, formatstr_156027.length+0-1)-0] == 45);
						if (negative_156107) {
						F.line = 2667;
						j_156104 = addInt(j_156104, 1);
						}
						
						F.line = 2668;
						var is_number_156115 = 0;
						L8: do {
							F.line = 2669;
								L9: while (true) {
								if (!((j_156104 < (formatstr_156027 != null ? formatstr_156027.length : 0)) && !((ConstSet3[formatstr_156027[chckIndx(j_156104, 0, formatstr_156027.length+0-1)-0]] != undefined)))) break L9;
									if ((ConstSet4[formatstr_156027[chckIndx(j_156104, 0, formatstr_156027.length+0-1)-0]] != undefined)) {
									F.line = 2671;
									k_156106 = subInt(addInt(mulInt(k_156106, 10), formatstr_156027[chckIndx(j_156104, 0, formatstr_156027.length+0-1)-0]), 48);
									if ((is_number_156115 == 0)) {
									F.line = 2672;
									is_number_156115 = 1;
									}
									
									}
									else {
										F.line = 2674;
										is_number_156115 = -1;
									}
									
									F.line = 2675;
									j_156104 = addInt(j_156104, 1);
								}
						} while(false);
						if ((is_number_156115 == 1)) {
						F.line = 2677;
						if (!(negative_156107)) {
						Tmp10 = subInt(k_156106, 1);
						}
						else {
						Tmp10 = subInt((a_156029 != null ? a_156029.length : 0), k_156106);
						}
						
						var idx_156148 = Tmp10;
							if ((idx_156148 < 0)) Tmp11 = true; else {								Tmp11 = ((a_156029 != null ? (a_156029.length-1) : -1) < idx_156148);							}						if (Tmp11) {
						F.line = 2678;
						invalid_format_string_155939();
						}
						
						F.line = 2679;
						if (s_156026[s_156026_Idx] != null) { s_156026[s_156026_Idx] = (s_156026[s_156026_Idx]).concat(a_156029[chckIndx(idx_156148, 0, a_156029.length+0-1)-0]); } else { s_156026[s_156026_Idx] = a_156029[chckIndx(idx_156148, 0, a_156029.length+0-1)-0].slice(); };
						}
						else {
							F.line = 2681;
							var x_156154 = find_normalized_155906(substr_30222(formatstr_156027, addInt(i_156033, 2), subInt(j_156104, 1)), a_156029);
								if (!(0 <= x_156154)) Tmp12 = false; else {									Tmp12 = (x_156154 < (a_156029 != null ? (a_156029.length-1) : -1));								}							if (Tmp12) {
							F.line = 2682;
							if (s_156026[s_156026_Idx] != null) { s_156026[s_156026_Idx] = (s_156026[s_156026_Idx]).concat(a_156029[chckIndx(addInt(x_156154, 1), 0, a_156029.length+0-1)-0]); } else { s_156026[s_156026_Idx] = a_156029[chckIndx(addInt(x_156154, 1), 0, a_156029.length+0-1)-0].slice(); };
							}
							else {
								F.line = 2683;
							invalid_format_string_155939();
							}
							
						}
						
						F.line = 2684;
						i_156033 = addInt(j_156104, 1);
						break;
					case 97:
					case 98:
					case 99:
					case 100:
					case 101:
					case 102:
					case 103:
					case 104:
					case 105:
					case 106:
					case 107:
					case 108:
					case 109:
					case 110:
					case 111:
					case 112:
					case 113:
					case 114:
					case 115:
					case 116:
					case 117:
					case 118:
					case 119:
					case 120:
					case 121:
					case 122:
					case 65:
					case 66:
					case 67:
					case 68:
					case 69:
					case 70:
					case 71:
					case 72:
					case 73:
					case 74:
					case 75:
					case 76:
					case 77:
					case 78:
					case 79:
					case 80:
					case 81:
					case 82:
					case 83:
					case 84:
					case 85:
					case 86:
					case 87:
					case 88:
					case 89:
					case 90:
					case 128:
					case 129:
					case 130:
					case 131:
					case 132:
					case 133:
					case 134:
					case 135:
					case 136:
					case 137:
					case 138:
					case 139:
					case 140:
					case 141:
					case 142:
					case 143:
					case 144:
					case 145:
					case 146:
					case 147:
					case 148:
					case 149:
					case 150:
					case 151:
					case 152:
					case 153:
					case 154:
					case 155:
					case 156:
					case 157:
					case 158:
					case 159:
					case 160:
					case 161:
					case 162:
					case 163:
					case 164:
					case 165:
					case 166:
					case 167:
					case 168:
					case 169:
					case 170:
					case 171:
					case 172:
					case 173:
					case 174:
					case 175:
					case 176:
					case 177:
					case 178:
					case 179:
					case 180:
					case 181:
					case 182:
					case 183:
					case 184:
					case 185:
					case 186:
					case 187:
					case 188:
					case 189:
					case 190:
					case 191:
					case 192:
					case 193:
					case 194:
					case 195:
					case 196:
					case 197:
					case 198:
					case 199:
					case 200:
					case 201:
					case 202:
					case 203:
					case 204:
					case 205:
					case 206:
					case 207:
					case 208:
					case 209:
					case 210:
					case 211:
					case 212:
					case 213:
					case 214:
					case 215:
					case 216:
					case 217:
					case 218:
					case 219:
					case 220:
					case 221:
					case 222:
					case 223:
					case 224:
					case 225:
					case 226:
					case 227:
					case 228:
					case 229:
					case 230:
					case 231:
					case 232:
					case 233:
					case 234:
					case 235:
					case 236:
					case 237:
					case 238:
					case 239:
					case 240:
					case 241:
					case 242:
					case 243:
					case 244:
					case 245:
					case 246:
					case 247:
					case 248:
					case 249:
					case 250:
					case 251:
					case 252:
					case 253:
					case 254:
					case 255:
					case 95:
						F.line = 2686;
						var j_156161 = addInt(i_156033, 1);
						L13: do {
							F.line = 2687;
								L14: while (true) {
									if (!(j_156161 < (formatstr_156027 != null ? formatstr_156027.length : 0))) Tmp15 = false; else {										Tmp15 = (ConstSet6[formatstr_156027[chckIndx(j_156161, 0, formatstr_156027.length+0-1)-0]] != undefined);									}								if (!Tmp15) break L14;
									F.line = 2687;
									j_156161 = addInt(j_156161, 1);
								}
						} while(false);
						F.line = 2688;
						var x_156174 = find_normalized_155906(substr_30222(formatstr_156027, addInt(i_156033, 1), subInt(j_156161, 1)), a_156029);
							if (!(0 <= x_156174)) Tmp16 = false; else {								Tmp16 = (x_156174 < (a_156029 != null ? (a_156029.length-1) : -1));							}						if (Tmp16) {
						F.line = 2689;
						if (s_156026[s_156026_Idx] != null) { s_156026[s_156026_Idx] = (s_156026[s_156026_Idx]).concat(a_156029[chckIndx(addInt(x_156174, 1), 0, a_156029.length+0-1)-0]); } else { s_156026[s_156026_Idx] = a_156029[chckIndx(addInt(x_156174, 1), 0, a_156029.length+0-1)-0].slice(); };
						}
						else {
							F.line = 2690;
						invalid_format_string_155939();
						}
						
						F.line = 2691;
						i_156033 = j_156161;
						break;
					default: 
						F.line = 2693;
						invalid_format_string_155939();
						break;
					}
					}
					else {
						F.line = 2695;
						if (s_156026[s_156026_Idx] != null) { addChar(s_156026[s_156026_Idx], formatstr_156027[chckIndx(i_156033, 0, formatstr_156027.length+0-1)-0]); } else { s_156026[s_156026_Idx] = [formatstr_156027[chckIndx(i_156033, 0, formatstr_156027.length+0-1)-0]]; };
						F.line = 2696;
						i_156033 = addInt(i_156033, 1);
					}
					
				}
		} while(false);
	framePtr = F.prev;

	
}

function nsuFormatSingleElem(formatstr_156233, a_156234) {
	var result_156235 = [null];

	var F={procname:"strutils.%",prev:framePtr,filename:"strutils.nim",line:0};
	framePtr = F;
		F.line = 2750;
		result_156235[0] = nimCopy(null, mnewString(0), NTI138);
		F.line = 2751;
		nsuAddf(result_156235, 0, formatstr_156233, [nimCopy(null, a_156234, NTI138)]);
	framePtr = F.prev;

	return result_156235[0];

}

function sys_fatal_15062(message_15066) {
	var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"fatal.nim",line:0};
	framePtr = F;
		F.line = 34;
		var e_15203 = null;
		F.line = 37;
		e_15203 = {m_type: NTI3650, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		F.line = 38;
		e_15203.message = nimCopy(null, message_15066, NTI138);
		F.line = 39;
		raiseException(e_15203, "AssertionError");
	framePtr = F.prev;

	
}

function raise_assert_15058(msg_15060) {
	var F={procname:"assertions.raiseAssert",prev:framePtr,filename:"assertions.nim",line:0};
	framePtr = F;
		F.line = 20;
		sys_fatal_15062(msg_15060);
	framePtr = F.prev;

	
}

function failed_assert_impl_15266(msg_15268) {
	var F={procname:"assertions.failedAssertImpl",prev:framePtr,filename:"assertions.nim",line:0};
	framePtr = F;
		F.line = 27;
		raise_assert_15058(msg_15268);
	framePtr = F.prev;

	
}

function xml_escape_188641(s_188643) {
	var result_188644 = null;

	var F={procname:"unittest.xmlEscape",prev:framePtr,filename:"unittest.nim",line:0};
	framePtr = F;
		F.line = 265;
		result_188644 = nimCopy(null, mnewString(0), NTI138);
		L1: do {
			F.line = 266;
			var c_188646 = 0;
			F.line = 202;
			var i_209231 = 0;
			F.line = 203;
			var l_209232 = (s_188643 != null ? s_188643.length : 0);
			L2: do {
				F.line = 204;
					L3: while (true) {
					if (!(i_209231 < l_209232)) break L3;
						F.line = 266;
						c_188646 = s_188643[chckIndx(i_209231, 0, s_188643.length+0-1)-0];
						F.line = 267;
						switch (c_188646) {
						case 60:
							F.line = 268;
							if (result_188644 != null) { result_188644 = (result_188644).concat(makeNimstrLit("&lt;")); } else { result_188644 = makeNimstrLit("&lt;"); };
							break;
						case 62:
							F.line = 269;
							if (result_188644 != null) { result_188644 = (result_188644).concat(makeNimstrLit("&gt;")); } else { result_188644 = makeNimstrLit("&gt;"); };
							break;
						case 38:
							F.line = 270;
							if (result_188644 != null) { result_188644 = (result_188644).concat(makeNimstrLit("&amp;")); } else { result_188644 = makeNimstrLit("&amp;"); };
							break;
						case 34:
							F.line = 271;
							if (result_188644 != null) { result_188644 = (result_188644).concat(makeNimstrLit("&quot;")); } else { result_188644 = makeNimstrLit("&quot;"); };
							break;
						case 39:
							F.line = 272;
							if (result_188644 != null) { result_188644 = (result_188644).concat(makeNimstrLit("&apos;")); } else { result_188644 = makeNimstrLit("&apos;"); };
							break;
						default: 
							if ((c_188646 < 32)) {
							F.line = 275;
							if (result_188644 != null) { result_188644 = (result_188644).concat((makeNimstrLit("&#") || []).concat(cstrToNimstr((c_188646)+"") || [],[59])); } else { result_188644 = (makeNimstrLit("&#") || []).concat(cstrToNimstr((c_188646)+"") || [],[59]).slice(); };
							}
							else {
								F.line = 277;
							if (result_188644 != null) { addChar(result_188644, c_188646); } else { result_188644 = [c_188646]; };
							}
							
							break;
						}
						F.line = 206;
						i_209231 = addInt(i_209231, 1);
						if (!(((s_188643 != null ? s_188643.length : 0) == l_209232))) {
						F.line = 207;
						failed_assert_impl_15266(makeNimstrLit("C:\\Users\\edant\\scoop\\apps\\nim\\current\\lib\\system\\iterators.nim(207, 11) `len(a) == L` the length of the string changed while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_188644;

}

function suite_started_188741(formatter_188743, suite_name_188744) {
	var F={procname:"unittest.suiteStarted",prev:framePtr,filename:"unittest.nim",line:0};
	framePtr = F;
		F.line = 300;
		write_line_159641(formatter_188743.stream, [nsuFormatSingleElem(makeNimstrLit("\x09<testsuite name=\"$1\">"), xml_escape_188641(suite_name_188744))]);
	framePtr = F.prev;

	
}

function suite_started_188014(formatter_188016, suite_name_188017) {
	var F={procname:"unittest.suiteStarted",prev:framePtr,filename:"unittest.nim",line:0};
	framePtr = F;
		F.line = 226;
		rawEcho(makeNimstrLit("\x0A[Suite] "), suite_name_188017);
		F.line = 227;
		formatter_188016.isInSuite = true;
	framePtr = F.prev;

	
}

function suite_started_187644(formatter_187646, suite_name_187647) {
	var F={procname:"unittest.suiteStarted",prev:framePtr,filename:"unittest.nim",line:0};
	framePtr = F;
	framePtr = F.prev;

	
}

function suite_started_187661(formatter_187646, suite_name_187647) {
	var F={procname:"unittest.suiteStarted",prev:framePtr,filename:"unittest.nim",line:0};
	framePtr = F;
		F.line = 510;
		chckNilDisp(formatter_187646);
		if (isObj(formatter_187646.m_type, NTI187430)) {
		F.line = 168;
		suite_started_188741(formatter_187646, suite_name_187647);
		}
		else {
		if (isObj(formatter_187646.m_type, NTI187424)) {
		F.line = 168;
		suite_started_188014(formatter_187646, suite_name_187647);
		}
		else {
		if (isObj(formatter_187646.m_type, NTI187422)) {
		F.line = 168;
		suite_started_187644(formatter_187646, suite_name_187647);
		}
		}}
	framePtr = F.prev;

	
}

function to_float_10657(i_10659) {
	var result_10660 = 0.0;

	var F={procname:"system.toFloat",prev:framePtr,filename:"system.nim",line:0};
	framePtr = F;
		F.line = 2287;
		result_10660 = i_10659;
	framePtr = F.prev;

	return result_10660;

}

function HEX2F_26817(x_26819, y_26820) {
	var result_26821 = 0.0;

	var F={procname:"system./",prev:framePtr,filename:"system.nim",line:0};
	framePtr = F;
		F.line = 3896;
		result_26821 = (to_float_10657(x_26819) / to_float_10657(y_26820));
	framePtr = F.prev;

	return result_26821;

}

function epoch_time_178201() {
	var result_178203 = 0.0;

	var F={procname:"times.epochTime",prev:framePtr,filename:"times.nim",line:0};
	framePtr = F;
		F.line = 2564;
		result_178203 = HEX2F_26817(new Date().getTime(), 1000);
	framePtr = F.prev;

	return result_178203;

}

function test_started_188761(formatter_188763, test_name_188764) {
	var F={procname:"unittest.testStarted",prev:framePtr,filename:"unittest.nim",line:0};
	framePtr = F;
		F.line = 303;
		if (formatter_188763.testErrors === null) formatter_188763.testErrors = [];
               if (formatter_188763.testErrors.length < 0) { for (var i=formatter_188763.testErrors.length;i<0;++i) formatter_188763.testErrors.push(null); }
               else { formatter_188763.testErrors.length = 0; };
		F.line = 304;
		(formatter_188763.testStackTrace == null ? formatter_188763.testStackTrace = mnewString(0) : formatter_188763.testStackTrace.length = 0);
		F.line = 305;
		formatter_188763.testStartTime = epoch_time_178201();
	framePtr = F.prev;

	
}

function test_started_188218(formatter_188220, test_name_188221) {
	var F={procname:"unittest.testStarted",prev:framePtr,filename:"unittest.nim",line:0};
	framePtr = F;
		F.line = 230;
		formatter_188220.isInTest = true;
	framePtr = F.prev;

	
}

function test_started_187663(formatter_187665, test_name_187666) {
	var F={procname:"unittest.testStarted",prev:framePtr,filename:"unittest.nim",line:0};
	framePtr = F;
	framePtr = F.prev;

	
}

function test_started_187680(formatter_187665, test_name_187666) {
	var F={procname:"unittest.testStarted",prev:framePtr,filename:"unittest.nim",line:0};
	framePtr = F;
		F.line = 510;
		chckNilDisp(formatter_187665);
		if (isObj(formatter_187665.m_type, NTI187430)) {
		F.line = 170;
		test_started_188761(formatter_187665, test_name_187666);
		}
		else {
		if (isObj(formatter_187665.m_type, NTI187424)) {
		F.line = 170;
		test_started_188218(formatter_187665, test_name_187666);
		}
		else {
		if (isObj(formatter_187665.m_type, NTI187422)) {
		F.line = 170;
		test_started_187663(formatter_187665, test_name_187666);
		}
		}}
	framePtr = F.prev;

	
}

function add_188792(x_188797, x_188797_Idx, y_188799) {
		var Tmp1;

	var F={procname:"add.add",prev:framePtr,filename:"system.nim",line:0};
	framePtr = F;
		F.line = 2121;
		var xl_188805 = (x_188797[x_188797_Idx] != null ? x_188797[x_188797_Idx].length : 0);
		F.line = 2122;
		if (x_188797[x_188797_Idx] === null) x_188797[x_188797_Idx] = [];
               if (x_188797[x_188797_Idx].length < (Tmp1 = chckRange(addInt(xl_188805, (y_188799 != null ? y_188799.length : 0)), 0, 2147483647), Tmp1)) { for (var i=x_188797[x_188797_Idx].length;i<Tmp1;++i) x_188797[x_188797_Idx].push(null); }
               else { x_188797[x_188797_Idx].length = Tmp1; };
		L2: do {
			F.line = 2123;
			var i_188830 = 0;
			F.line = 2698;
			var colontmp__209238 = 0;
			F.line = 2123;
			colontmp__209238 = (y_188799 != null ? (y_188799.length-1) : -1);
			F.line = 2709;
			var res_209239 = 0;
			L3: do {
				F.line = 2710;
					L4: while (true) {
					if (!(res_209239 <= colontmp__209238)) break L4;
						F.line = 2123;
						i_188830 = res_209239;
						F.line = 2123;
						x_188797[x_188797_Idx][chckIndx(addInt(xl_188805, i_188830), 0, x_188797[x_188797_Idx].length+0-1)-0] = nimCopy(null, y_188799[chckIndx(i_188830, 0, y_188799.length+0-1)-0], NTI138);
						F.line = 2712;
						res_209239 = addInt(res_209239, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function failure_occurred_188785(formatter_188787, checkpoints_188789, stack_trace_188790) {
	var F={procname:"unittest.failureOccurred",prev:framePtr,filename:"unittest.nim",line:0};
	framePtr = F;
		F.line = 311;
		add_188792(formatter_188787, "testErrors", checkpoints_188789);
		if ((0 < (stack_trace_188790 != null ? stack_trace_188790.length : 0))) {
		F.line = 313;
		formatter_188787.testStackTrace = nimCopy(null, stack_trace_188790, NTI138);
		}
		
	framePtr = F.prev;

	
}

function failure_occurred_188235(formatter_188237, checkpoints_188239, stack_trace_188240) {
		var Tmp1;

	var F={procname:"unittest.failureOccurred",prev:framePtr,filename:"unittest.nim",line:0};
	framePtr = F;
		if ((0 < (stack_trace_188240 != null ? stack_trace_188240.length : 0))) {
		F.line = 235;
		rawEcho(stack_trace_188240);
		}
		
		F.line = 236;
		if (formatter_188237.isInSuite) {
		Tmp1 = makeNimstrLit("    ");
		}
		else {
		Tmp1 = [];
		}
		
		var prefix_188246 = nimCopy(null, Tmp1, NTI138);
		L2: do {
			F.line = 237;
			var msg_188414 = null;
			F.line = 184;
			var i_209246 = 0;
			F.line = 185;
			var l_209247 = (checkpoints_188239 != null ? checkpoints_188239.length : 0);
			L3: do {
				F.line = 186;
					L4: while (true) {
					if (!(i_209246 < l_209247)) break L4;
						F.line = 237;
						msg_188414 = checkpoints_188239[chckIndx(i_209246, 0, checkpoints_188239.length+0-1)-0];
						F.line = 238;
						rawEcho(prefix_188246, msg_188414);
						F.line = 188;
						i_209246 = addInt(i_209246, 1);
						if (!(((checkpoints_188239 != null ? checkpoints_188239.length : 0) == l_209247))) {
						F.line = 189;
						failed_assert_impl_15266(makeNimstrLit("C:\\Users\\edant\\scoop\\apps\\nim\\current\\lib\\system\\iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function failure_occurred_187682(formatter_187684, checkpoints_187686, stack_trace_187687) {
	var F={procname:"unittest.failureOccurred",prev:framePtr,filename:"unittest.nim",line:0};
	framePtr = F;
	framePtr = F.prev;

	
}

function failure_occurred_187701(formatter_187684, checkpoints_187686, stack_trace_187687) {
	var F={procname:"unittest.failureOccurred",prev:framePtr,filename:"unittest.nim",line:0};
	framePtr = F;
		F.line = 510;
		chckNilDisp(formatter_187684);
		if (isObj(formatter_187684.m_type, NTI187430)) {
		F.line = 172;
		failure_occurred_188785(formatter_187684, checkpoints_187686, stack_trace_187687);
		}
		else {
		if (isObj(formatter_187684.m_type, NTI187424)) {
		F.line = 172;
		failure_occurred_188235(formatter_187684, checkpoints_187686, stack_trace_187687);
		}
		else {
		if (isObj(formatter_187684.m_type, NTI187422)) {
		F.line = 172;
		failure_occurred_187682(formatter_187684, checkpoints_187686, stack_trace_187687);
		}
		}}
	framePtr = F.prev;

	
}

function nsuformatBiggestFloat(f_155221, format_155222, precision_155228, decimal_sep_155229) {
	var result_155230 = null;

	var F={procname:"strutils.formatBiggestFloat",prev:framePtr,filename:"strutils.nim",line:0};
	framePtr = F;
		F.line = 2321;
		var precision_155401 = precision_155228;
		if ((precision_155401 == -1)) {
		F.line = 2324;
		precision_155401 = 6;
		}
		
		F.line = 2325;
		var res_155403 = null;
		F.line = 2326;
		switch (format_155222) {
		case 0:
			F.line = 2328;
			res_155403 = f_155221.toString();
			break;
		case 1:
			F.line = 2330;
			res_155403 = f_155221.toFixed(precision_155401);
			break;
		case 2:
			F.line = 2332;
			res_155403 = f_155221.toExponential(precision_155401);
			break;
		}
		F.line = 2333;
		result_155230 = nimCopy(null, cstrToNimstr(res_155403), NTI138);
		if (((1.0000000000000000e+000 / f_155221) == -Infinity)) {
		F.line = 2336;
		result_155230 = nimCopy(null, (makeNimstrLit("-") || []).concat(cstrToNimstr(res_155403) || []), NTI138);
		}
		
		L1: do {
			F.line = 2337;
			var i_155411 = 0;
			F.line = 2736;
			var colontmp__209257 = 0;
			F.line = 2337;
			colontmp__209257 = (result_155230 != null ? result_155230.length : 0);
			F.line = 2738;
			var i_209258 = 0;
			L2: do {
				F.line = 2739;
					L3: while (true) {
					if (!(i_209258 < colontmp__209257)) break L3;
						F.line = 2337;
						i_155411 = i_209258;
						if ((ConstSet7[result_155230[chckIndx(i_155411, 0, result_155230.length+0-1)-0]] != undefined)) {
						F.line = 2340;
						result_155230[chckIndx(i_155411, 0, result_155230.length+0-1)-0] = decimal_sep_155229;
						}
						
						F.line = 2741;
						i_209258 = addInt(i_209258, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_155230;

}

function nsuformatFloat(f_155449, format_155450, precision_155456, decimal_sep_155457) {
	var result_155458 = null;

	var F={procname:"strutils.formatFloat",prev:framePtr,filename:"strutils.nim",line:0};
	framePtr = F;
		F.line = 2400;
		result_155458 = nimCopy(null, nsuformatBiggestFloat(f_155449, format_155450, precision_155456, decimal_sep_155457), NTI138);
	framePtr = F.prev;

	return result_155458;

}

function nsuFormatOpenArray(formatstr_156202, a_156204) {
	var result_156205 = [null];

	var F={procname:"strutils.%",prev:framePtr,filename:"strutils.nim",line:0};
	framePtr = F;
		F.line = 2743;
		result_156205[0] = nimCopy(null, mnewString(0), NTI138);
		F.line = 2744;
		nsuAddf(result_156205, 0, formatstr_156202, a_156204);
	framePtr = F.prev;

	return result_156205[0];

}

function HEX5BHEX5D_188890(s_188895, i_188896) {
	var result_188898 = null;
	var result_188898_Idx = 0;

	var F={procname:"[].[]",prev:framePtr,filename:"system.nim",line:0};
	framePtr = F;
		F.line = 4042;
		result_188898 = s_188895; result_188898_Idx = chckIndx(subInt((s_188895 != null ? s_188895.length : 0), i_188896), 0, s_188895.length+0-1)-0;
	framePtr = F.prev;

	return [result_188898, result_188898_Idx];

}

function test_ended_188860(formatter_188862, test_result_188863) {
			var Tmp1;
				var Tmp2;
			var Tmp3;
			var Tmp4;
			var Tmp5;

	var F={procname:"unittest.testEnded",prev:framePtr,filename:"unittest.nim",line:0};
	framePtr = F;
		F.line = 316;
		var time_188864 = (epoch_time_178201() - formatter_188862.testStartTime);
		F.line = 317;
		var time_str_188865 = nsuformatFloat(time_188864, 1, 8, 46);
		F.line = 318;
		write_line_159641(formatter_188862.stream, [nsuFormatOpenArray(makeNimstrLit("\x09\x09<testcase name=\"$#\" time=\"$#\">"), [xml_escape_188641(test_result_188863.testName), nimCopy(null, time_str_188865, NTI138)])]);
		F.line = 320;
		switch (test_result_188863.status) {
		case 0:
			break;
		case 2:
			F.line = 324;
			write_line_159641(formatter_188862.stream, [makeNimstrLit("<skipped />")]);
			break;
		case 1:
			F.line = 326;
				if (!(0 < (formatter_188862.testStackTrace != null ? formatter_188862.testStackTrace.length : 0))) Tmp2 = false; else {					Tmp2 = (0 < (formatter_188862.testErrors != null ? formatter_188862.testErrors.length : 0));				}			if (Tmp2) {
			Tmp1 = xml_escape_188641((Tmp3 = HEX5BHEX5D_188890(formatter_188862.testErrors, 1), Tmp3)[0][Tmp3[1]]);
			}
			else {
			if ((0 < (formatter_188862.testErrors != null ? formatter_188862.testErrors.length : 0))) {
			Tmp1 = xml_escape_188641(formatter_188862.testErrors[chckIndx(0, 0, formatter_188862.testErrors.length+0-1)-0]);
			}
			else {
			Tmp1 = makeNimstrLit("The test failed without outputting an error");
			}
			}
			var failure_msg_188936 = nimCopy(null, Tmp1, NTI138);
			F.line = 333;
			var errs_188937 = [];
			if ((1 < (formatter_188862.testErrors != null ? formatter_188862.testErrors.length : 0))) {
			F.line = 335;
			if ((0 < (formatter_188862.testStackTrace != null ? formatter_188862.testStackTrace.length : 0))) {
			Tmp4 = 0;
			}
			else {
			Tmp4 = 1;
			}
			
			var start_idx_188948 = Tmp4;
			F.line = 336;
			if ((0 < (formatter_188862.testStackTrace != null ? formatter_188862.testStackTrace.length : 0))) {
			Tmp5 = subInt((formatter_188862.testErrors != null ? formatter_188862.testErrors.length : 0), 2);
			}
			else {
			Tmp5 = subInt((formatter_188862.testErrors != null ? formatter_188862.testErrors.length : 0), 1);
			}
			
			var end_idx_188961 = Tmp5;
			L6: do {
				F.line = 340;
				var err_idx_188967 = 0;
				F.line = 2709;
				var res_209251 = start_idx_188948;
				L7: do {
					F.line = 2710;
						L8: while (true) {
						if (!(res_209251 <= end_idx_188961)) break L8;
							F.line = 340;
							err_idx_188967 = res_209251;
							if ((0 < (errs_188937 != null ? errs_188937.length : 0))) {
							F.line = 342;
							if (errs_188937 != null) { errs_188937 = (errs_188937).concat(makeNimstrLit("\x0A")); } else { errs_188937 = makeNimstrLit("\x0A"); };
							}
							
							F.line = 343;
							if (errs_188937 != null) { errs_188937 = (errs_188937).concat(xml_escape_188641(formatter_188862.testErrors[chckIndx(err_idx_188967, 0, formatter_188862.testErrors.length+0-1)-0])); } else { errs_188937 = xml_escape_188641(formatter_188862.testErrors[chckIndx(err_idx_188967, 0, formatter_188862.testErrors.length+0-1)-0]).slice(); };
							F.line = 2712;
							res_209251 = addInt(res_209251, 1);
						}
				} while(false);
			} while(false);
			}
			
			if ((0 < (formatter_188862.testStackTrace != null ? formatter_188862.testStackTrace.length : 0))) {
			F.line = 346;
			write_line_159641(formatter_188862.stream, [nsuFormatOpenArray(makeNimstrLit("\x09\x09\x09<error message=\"$#\">$#</error>"), [nimCopy(null, failure_msg_188936, NTI138), xml_escape_188641(formatter_188862.testStackTrace)])]);
			if ((0 < (errs_188937 != null ? errs_188937.length : 0))) {
			F.line = 349;
			write_line_159641(formatter_188862.stream, [nsuFormatSingleElem(makeNimstrLit("\x09\x09\x09<system-err>$#</system-err>"), errs_188937)]);
			}
			
			}
			else {
				F.line = 351;
			write_line_159641(formatter_188862.stream, [nsuFormatOpenArray(makeNimstrLit("\x09\x09\x09<failure message=\"$#\">$#</failure>"), [nimCopy(null, failure_msg_188936, NTI138), nimCopy(null, errs_188937, NTI138)])]);
			}
			
			break;
		}
		F.line = 354;
		write_line_159641(formatter_188862.stream, [makeNimstrLit("\x09\x09</testcase>")]);
	framePtr = F.prev;

	
}

function is_undefined_25883(x_25886) {
	var result_25887 = false;

	var F={procname:"isUndefined.isUndefined",prev:framePtr,filename:"reprjs.nim",line:0};
	framePtr = F;
		F.line = 34;
		result_25887 = x_25886 === undefined;
	framePtr = F.prev;

	return result_25887;

}

function test_ended_188432(formatter_188434, test_result_188435) {
			var Tmp1;
				var Tmp2;
		var Tmp3;

	var F={procname:"unittest.testEnded",prev:framePtr,filename:"unittest.nim",line:0};
	framePtr = F;
		F.line = 241;
		formatter_188434.isInTest = false;
			if (!!((formatter_188434.outputLevel == 2))) Tmp1 = false; else {				if ((formatter_188434.outputLevel == 0)) Tmp2 = true; else {					Tmp2 = (test_result_188435.status == 1);				}				Tmp1 = Tmp2;			}		if (Tmp1) {
		F.line = 245;
		if ((0 < (test_result_188435.suiteName != null ? test_result_188435.suiteName.length : 0))) {
		Tmp3 = makeNimstrLit("  ");
		}
		else {
		Tmp3 = [];
		}
		
		var prefix_188456 = nimCopy(null, Tmp3, NTI138);
		F.line = 259;
		rawEcho(prefix_188456, makeNimstrLit("["), reprEnum(test_result_188435.status, NTI187402), makeNimstrLit("] "), test_result_188435.testName);
		}
		
	framePtr = F.prev;

	
}

function test_ended_187703(formatter_187705, test_result_187706) {
	var F={procname:"unittest.testEnded",prev:framePtr,filename:"unittest.nim",line:0};
	framePtr = F;
	framePtr = F.prev;

	
}

function test_ended_187720(formatter_187705, test_result_187706) {
	var F={procname:"unittest.testEnded",prev:framePtr,filename:"unittest.nim",line:0};
	framePtr = F;
		F.line = 510;
		chckNilDisp(formatter_187705);
		if (isObj(formatter_187705.m_type, NTI187430)) {
		F.line = 177;
		test_ended_188860(formatter_187705, test_result_187706);
		}
		else {
		if (isObj(formatter_187705.m_type, NTI187424)) {
		F.line = 177;
		test_ended_188432(formatter_187705, test_result_187706);
		}
		else {
		if (isObj(formatter_187705.m_type, NTI187422)) {
		F.line = 177;
		test_ended_187703(formatter_187705, test_result_187706);
		}
		}}
	framePtr = F.prev;

	
}

function suite_ended_189003(formatter_189005) {
	var F={procname:"unittest.suiteEnded",prev:framePtr,filename:"unittest.nim",line:0};
	framePtr = F;
		F.line = 357;
		write_line_159641(formatter_189005.stream, [makeNimstrLit("\x09</testsuite>")]);
	framePtr = F.prev;

	
}

function suite_ended_188625(formatter_188627) {
	var F={procname:"unittest.suiteEnded",prev:framePtr,filename:"unittest.nim",line:0};
	framePtr = F;
		F.line = 262;
		formatter_188627.isInSuite = false;
	framePtr = F.prev;

	
}

function suite_ended_187722(formatter_187724) {
	var F={procname:"unittest.suiteEnded",prev:framePtr,filename:"unittest.nim",line:0};
	framePtr = F;
	framePtr = F.prev;

	
}

function suite_ended_187738(formatter_187724) {
	var F={procname:"unittest.suiteEnded",prev:framePtr,filename:"unittest.nim",line:0};
	framePtr = F;
		F.line = 510;
		chckNilDisp(formatter_187724);
		if (isObj(formatter_187724.m_type, NTI187430)) {
		F.line = 179;
		suite_ended_189003(formatter_187724);
		}
		else {
		if (isObj(formatter_187724.m_type, NTI187424)) {
		F.line = 179;
		suite_ended_188625(formatter_187724);
		}
		else {
		if (isObj(formatter_187724.m_type, NTI187422)) {
		F.line = 179;
		suite_ended_187722(formatter_187724);
		}
		}}
	framePtr = F.prev;

	
}
